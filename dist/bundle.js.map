{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://card-game/./gameCard.ts","webpack://card-game/./utils.ts","webpack://card-game/./startGame.ts","webpack://card-game/./gameMenu.ts","webpack://card-game/./script.ts"],"sourcesContent":["export const createGameCard = (\n    defaultIcon: object | string,\n    flippedCardIcon: object | string\n) => {\n    const card = document.createElement(\"div\");\n    card.classList.add(\"game-card\");\n\n    const notFlippedCardI = document.createElement(\"img\");\n    const flippedCardI = document.createElement(\"img\");\n\n    notFlippedCardI.setAttribute(\"src\", `${defaultIcon}`);\n    flippedCardI.setAttribute(\"src\", `${flippedCardIcon}`);\n\n    card.append(flippedCardI, notFlippedCardI);\n\n    return card;\n};\n","// Перемешивание карт\nexport const shuffle = (arr: Array<string> | Array<number>) => {\n    let currentIndex = arr.length,\n        randomIndex;\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        [arr[currentIndex], arr[randomIndex]] = [\n            arr[randomIndex],\n            arr[currentIndex],\n        ];\n    }\n\n    return arr;\n};\n\n// Дубликаты карт\nexport const dublicateArray = (arr: Array<number>) =>\n    //@ts-ignore\n    arr.reduce((res, current) => res.concat([current, current]), []);\n\nexport const createCardsArray = (initLevel: string | Array<number>) => {\n    const cardsIcons = [\n        \"static/6_baptize.png\",\n        \"static/7_baptize.png\",\n        \"static/8_baptize.png\",\n        \"static/9_baptize.png\",\n        \"static/10_baptize.png\",\n        \"static/jack_baptize.png\",\n        \"static/queen_baptize.png\",\n        \"static/king_baptize.png\",\n        \"static/ace_baptize.png\",\n        \"static/6_bubi.png\",\n        \"static/7_bubi.png\",\n        \"static/8_bubi.png\",\n        \"static/9_bubi.png\",\n        \"static/10_bubi.png\",\n        \"static/jack_bubi.png\",\n        \"static/queen_bubi.png\",\n        \"static/king_bubi.png\",\n        \"static/ace_bubi.png\",\n        \"static/6_hearst.png\",\n        \"static/7_hearst.png\",\n        \"static/8_hearst.png\",\n        \"static/9_hearst.png\",\n        \"static/10_hearst.png\",\n        \"static/jack_hearst.png\",\n        \"static/queen_hearst.png\",\n        \"static/king_hearst.png\",\n        \"static/ace_hearst.png\",\n        \"static/6_spades.png\",\n        \"static/7_spades.png\",\n        \"static/8_spades.png\",\n        \"static/9_spades.png\",\n        \"static/10_spades.png\",\n        \"static/jack_spades.png\",\n        \"static/queen_spades.png\",\n        \"static/king_spades.png\",\n        \"static/ace_spades.png\",\n    ];\n\n    switch (initLevel) {\n        case \"1\":\n            return shuffle(cardsIcons).slice(0, 3);\n        case \"2\":\n            return shuffle(cardsIcons).slice(0, 6);\n        case \"3\":\n            return shuffle(cardsIcons).slice(0, 9);\n        default:\n            break;\n    }\n};\n","import { createGameCard } from \"./gameCard\";\nimport { createGameMenu } from \"./gameMenu\";\nimport { createCardsArray, dublicateArray, shuffle } from \"./utils\";\nexport const headerGame = document.querySelector(\".header\");\nexport const resultContainer = document.querySelector(\".res-container\");\nexport const resultGame = document.querySelector(\".result\");\nexport const gameScreen = document.querySelector(\".common\");\n\nexport const startGame = (initLevel: string) => {\n    let firstCard: null | number = null;\n    let secondCard: null | number = null;\n    let clickable = true;\n    let countShowCards = false;\n    let Interval: number | any;\n    let seconds = 0;\n    let tens = 0;\n\n    const restartButton = document.createElement(\"button\");\n    restartButton.textContent = \"Начать заново\";\n    restartButton.classList.add(\"restart-btn\");\n    const appendSeconds = document.createElement(\"span\"); // timer\n    const appendTens = document.createElement(\"span\"); // timer\n    appendSeconds.textContent = \"00\";\n    appendTens.textContent = \"00\";\n    appendSeconds.classList.add(\"timer-count\");\n    appendTens.classList.add(\"timer-count\");\n    const dot = document.createElement(\"span\");\n    dot.textContent = \".\";\n    dot.classList.add(\"timer-count\");\n    const timer = document.createElement(\"div\");\n    timer.append(appendSeconds, dot, appendTens);\n\n    const gameSection = document.querySelector(\".game-section__container\");\n    const gameTable = document.createElement(\"div\");\n    gameTable.classList.add(\"game-table\");\n\n    const showCards = document.createElement(\"button\");\n    showCards.textContent = \"Показать карты\";\n    showCards.classList.add(\"show-btn\");\n\n    const imgResult = document.createElement(\"img\");\n    imgResult.setAttribute(\"src\", \"static/win.png\");\n    const headerResult = document.createElement(\"h3\");\n    headerResult.textContent = \"Вы выиграли!\";\n    headerResult.classList.add(\"win-text\");\n    const timeResult = document.createElement(\"h3\");\n    timeResult.textContent = \"Затраченное время!\";\n    timeResult.classList.add(\"time-left\");\n\n    const initCards = createCardsArray(initLevel);\n    //@ts-ignore\n    const dublicCards = dublicateArray(initCards);\n\n    if (gameSection) {\n        gameSection.innerHTML = \"\";\n    }\n    if (headerGame) {\n        headerGame.innerHTML = \"\";\n    }\n    if (resultGame) {\n        resultGame.innerHTML = \"\";\n    }\n\n    showCards.classList.remove(\"disabled\");\n\n    shuffle(dublicCards);\n\n    dublicCards.forEach((icon: object | string) =>\n        gameTable.append(createGameCard(\"static/back.jpg\", icon))\n    );\n\n    if (headerGame) {\n        headerGame.append(timer, restartButton);\n    }\n    if (gameSection) {\n        gameSection.append(gameTable, showCards);\n    }\n\n    const cards = document.querySelectorAll(\".game-card\");\n\n    restartButton.addEventListener(\"click\", createGameMenu);\n\n    showCards.addEventListener(\"click\", () => {\n        if (countShowCards === false) {\n            setTimeout(() => {\n                cards.forEach((card) => card.classList.remove(\"flip\"));\n                showCards.classList.add(\"disabled\");\n            }, 5000);\n            cards.forEach((card) => card.classList.add(\"flip\"));\n            countShowCards = true;\n        }\n    });\n\n    // Сравнение карт\n    cards.forEach((card, index) =>\n        card.addEventListener(\"click\", () => {\n            clearInterval(Interval);\n            Interval = setInterval(startTimer, 10);\n            if (\n                clickable === true &&\n                !card.classList.contains(\"successfully\")\n            ) {\n                card.classList.add(\"flip\");\n\n                if (firstCard === null) {\n                    firstCard = index;\n                } else {\n                    if (index !== firstCard) {\n                        secondCard = index;\n                        clickable = false;\n                    }\n                }\n\n                if (\n                    firstCard !== null &&\n                    secondCard !== null &&\n                    firstCard !== secondCard\n                ) {\n                    if (\n                        //@ts-ignore\n                        cards[firstCard].firstElementChild.src ===\n                        //@ts-ignore\n                        cards[secondCard].firstElementChild.src\n                    ) {\n                        setTimeout(() => {\n                            if (firstCard && secondCard) {\n                                cards[firstCard].classList.add(\"successfully\");\n                                cards[secondCard].classList.add(\"successfully\");\n                            }\n\n                            firstCard = null;\n                            secondCard = null;\n                            clickable = true;\n                        }, 500);\n                    } else {\n                        clearInterval(Interval);\n                        setTimeout(() => {\n                            appendSeconds.classList.add(\"timer-res\");\n                            appendTens.classList.add(\"timer-res\");\n                            dot.classList.add(\"timer-res\");\n\n                            imgResult.setAttribute(\"src\", \"static/lose.png\");\n                            headerResult.textContent = \"Вы проиграли!\";\n                            headerResult.classList.add(\"win-text\");\n                            if (resultGame) {\n                                resultGame.classList.add(\"result\");\n                                resultGame.append(\n                                    imgResult,\n                                    headerResult,\n                                    timeResult,\n                                    timer,\n                                    restartButton\n                                );\n                            }\n                            if (resultContainer && resultGame) {\n                                resultContainer.classList.add(\"res-container\");\n                                resultContainer.append(resultGame);\n                            }\n                            if (gameScreen) {\n                                gameScreen.classList.add(\"back-result\");\n                            }\n                        }, 500);\n\n                        // Это логика, если дальше можно продолжать игру (свернуто)\n                        // setTimeout(() => {\n                        //     cards[firstCard].classList.remove(\"flip\");\n                        //     cards[secondCard].classList.remove(\"flip\");\n\n                        //     firstCard = null;\n                        //     secondCard = null;\n                        //     clickable = true;\n                        // }, 500);\n                    }\n                }\n            }\n            if (\n                Array.from(cards).every((card) =>\n                    card.className.includes(\"flip\")\n                )\n            ) {\n                clearInterval(Interval);\n                setTimeout(() => {\n                    appendSeconds.classList.add(\"timer-res\");\n                    appendTens.classList.add(\"timer-res\");\n                    dot.classList.add(\"timer-res\");\n\n                    if (resultGame) {\n                        resultGame.classList.add(\"result\");\n                        resultGame.append(\n                            imgResult,\n                            headerResult,\n                            timeResult,\n                            timer,\n                            restartButton\n                        );\n                    }\n                    if (resultContainer && resultGame) {\n                        resultContainer.classList.add(\"res-container\");\n                        resultContainer.append(resultGame);\n                    }\n                    if (gameScreen) {\n                        gameScreen.classList.add(\"back-result\");\n                    }\n                }, 500);\n            }\n        })\n    );\n\n    function startTimer() {\n        tens++;\n\n        if (tens < 9) {\n            appendTens.innerHTML = \"0\" + tens;\n        }\n\n        if (tens > 9) {\n            appendTens.innerHTML = \"\" + tens;\n        }\n\n        if (tens > 99) {\n            seconds++;\n            appendSeconds.innerHTML = \"0\" + seconds;\n            tens = 0;\n            appendTens.innerHTML = \"0\" + 0;\n        }\n\n        if (seconds > 9) {\n            appendSeconds.innerHTML = \"\" + seconds;\n        }\n    }\n};\n","import {\n    startGame,\n    headerGame,\n    resultGame,\n    gameScreen,\n    resultContainer,\n} from \"./startGame\";\n\nconst levelPage = document.querySelector(\".game-section__container\");\n\nexport const createGameMenu = () => {\n    if (headerGame) {\n        headerGame.innerHTML = \"\";\n    }\n    if (resultGame) {\n        resultGame.innerHTML = \"\";\n        resultGame.classList.remove(\"result\");\n    }\n    if (resultContainer) {\n        resultContainer.innerHTML = \"\";\n        resultContainer.classList.remove(\"res-container\");\n    }\n    if (gameScreen) {\n        gameScreen.classList.remove(\"back-result\");\n    }\n\n    const renderLevelPage = `\n        <form class=\"common-block center\">\n            <h1 class=\"common-text\">Выбери сложность</h1>\n            <div class=\"common-options options-form\">\n\n                <label for=\"1\">\n                    <div class=\"item\">\n                        <input class=\"input\" id=\"1\" name=\"item\" value=\"1\" type=\"radio\">\n                        1\n                    </div>\n                </label>\n\n                <label for=\"2\">\n                    <div class=\"item\">\n                        <input class=\"input\" id=\"2\" name=\"item\" value=\"2\" type=\"radio\">\n                        2\n                    </div>\n                </label>\n\n                <label for=\"3\">\n                    <div class=\"item\">\n                        <input class=\"input\" id=\"3\" name=\"item\" value=\"3\" type=\"radio\">\n                        3\n                    </div>\n                </label>\n\n            </div>\n            <button type=\"submit\" class=\"start-button\" disabled>Старт</button>\n        </form>\n        `;\n\n    if (levelPage) {\n        levelPage.innerHTML = renderLevelPage;\n    }\n\n    const levelForm = document.querySelector(\".options-form\");\n    const startButton = document.querySelector(\".start-button\");\n\n    // Стиль на выбор кнопки\n    const buttonsDifficultyLevel: NodeListOf<Element> =\n        document.querySelectorAll(\".item\");\n    //@ts-ignore\n    for (const button of buttonsDifficultyLevel) {\n        button.addEventListener(\"click\", () => {\n            //@ts-ignore\n            for (const button of buttonsDifficultyLevel) {\n                button.classList.remove(\"select-border\");\n            }\n            button.classList.add(\"select-border\"); // проверить корректность работы\n        });\n    }\n\n    // Выключение кнопки до выбора уровня\n    function checkIsLevel() {\n        if (levelForm && startButton) {\n            levelForm.addEventListener(\"change\", (event) => {\n                //@ts-ignore\n                if (event.target.matches('input[type=\"radio\"]')) {\n                    //@ts-ignore\n                    startButton.disabled = false;\n                }\n            });\n        }\n    }\n    checkIsLevel();\n\n    function choiseLevel() {\n        if (startButton) {\n            startButton.addEventListener(\"click\", () => {\n                if (levelForm) {\n                    //@ts-ignore\n                    const initLevel = levelForm.querySelector(\n                        'input[type=\"radio\"]:checked'\n                        //@ts-ignore\n                    ).value;\n\n                    console.log(initLevel);\n                    startGame(initLevel);\n                }\n            });\n        }\n    }\n    choiseLevel();\n};\n","import { createGameMenu } from \"./gameMenu\";\nimport \"./styles.css\";\nimport * as _ from \"lodash\";\n\nconst cardsApp = () => {\n    createGameMenu();\n};\n\ncardsApp();\n"],"names":["shuffle","arr","randomIndex","currentIndex","length","Math","floor","random","headerGame","document","querySelector","resultContainer","resultGame","gameScreen","levelPage","createGameMenu","innerHTML","classList","remove","levelForm","startButton","buttonsDifficultyLevel","querySelectorAll","button","addEventListener","add","event","target","matches","disabled","initLevel","value","console","log","Interval","firstCard","secondCard","clickable","countShowCards","seconds","tens","restartButton","createElement","textContent","appendSeconds","appendTens","dot","timer","append","gameSection","gameTable","showCards","imgResult","setAttribute","headerResult","timeResult","initCards","cardsIcons","slice","createCardsArray","dublicCards","reduce","res","current","concat","forEach","icon","defaultIcon","flippedCardIcon","card","notFlippedCardI","flippedCardI","createGameCard","cards","startTimer","setTimeout","index","clearInterval","setInterval","contains","firstElementChild","src","Array","from","every","className","includes","startGame"],"sourceRoot":""}